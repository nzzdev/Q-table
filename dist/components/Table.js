import { create_ssr_component, escape, each, add_attribute, validate_component } from 'svelte/internal';

/* src/components/Legend.svelte generated by Svelte v3.48.0 */

function getAspectXValue(bucket, minVal, maxVal) {
	return (bucket.from - minVal) * 100 / (maxVal - minVal);
}

function getBucketWidth(bucket, minVal, maxVal) {
	return (bucket.to - bucket.from) * 100 / (maxVal - minVal);
}

const Legend = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { colorColumn } = $$props;
	let { noInteraction } = $$props;
	if ($$props.colorColumn === void 0 && $$bindings.colorColumn && colorColumn !== void 0) $$bindings.colorColumn(colorColumn);
	if ($$props.noInteraction === void 0 && $$bindings.noInteraction && noInteraction !== void 0) $$bindings.noInteraction(noInteraction);

	return `${colorColumn.colorColumnType === "numerical"
	? `
  <div class="${"q-table-colorColumn-legend-container q-table-colorColumn-legend-container--desktopp"}"><div class="${"q-table-colorColumn-legend--numerical"}"><div class="${"s-legend-icon-label"}"><div class="${"q-table-colorColumn-legend-value-container"}"><span class="${"q-table-colorColumn-legend-value-container--minVal s-font-note s-font-note--tabularnums"}">${escape(colorColumn.legendData.minValue)}</span>
          <span class="${"q-table-colorColumn-legend-value-container--maxVal s-font-note s-font-note--tabularnums"}">${escape(colorColumn.legendData.maxValue)}</span></div>
        <div class="${"q-table-colorColumn-legend-border-container"}"><svg class="${"q-table-colorColumn-legend"}"><g>${each(colorColumn.legendData.buckets, (bucket, bucketIndex) => {
			return `${bucket.color.customColor
			? `<rect class="${"q-table-colorColumn-legend-bucket"}" style="${"color: " + escape(bucket.color.customColor)}" width="${escape(getBucketWidth(bucket, colorColumn.legendData.minValue, colorColumn.legendData.maxValue)) + "%"}" height="${"16"}" x="${escape(getAspectXValue(bucket, colorColumn.legendData.minValue, colorColumn.legendData.maxValue)) + "%"}" y="${"12"}"></rect>`
			: `<rect class="${"q-table-colorColumn-legend-bucket " + escape(bucket.color.colorClass)}" width="${escape(getBucketWidth(bucket, colorColumn.legendData.minValue, colorColumn.legendData.maxValue)) + "%"}" height="${"16"}" x="${escape(getAspectXValue(bucket, colorColumn.legendData.minValue, colorColumn.legendData.maxValue)) + "%"}" y="${"12"}"></rect>`}`;
		})}</g>${colorColumn.legendData.labelLegend !== null
		? `<g><circle cx="${escape(colorColumn.legendData.labelLegend.position) + "%"}" cy="${"20"}" r="${"4"}" stroke="${"white"}" stroke-width="${"1"}" fill="${"none"}"></circle><rect class="${"s-color-gray-9"}" fill="${"currentColor"}" width="${"0.5px"}" height="${"16"}" x="${escape(colorColumn.legendData.labelLegend.position) + "%"}" y="${"20"}"></rect></g>`
		: ``}</svg>
          <div class="${"q-table-colorColumn-legend-borders s-color-gray-6"}"></div></div>
        ${colorColumn.legendData.labelLegend !== null
		? `<div class="${"q-table-colorColumn-legend-marker s-font-note s-font-note--tabularnums"}"${add_attribute("style", colorColumn.legendData.labelLegend.descriptionAlignment, 0)}>${escape(colorColumn.legendData.labelLegend.label)}: ${escape(colorColumn.legendData.labelLegend.value)}</div>`
		: ``}</div>
      ${colorColumn.legendData.hasSingleValueBucket || colorColumn.legendData.hasNullValues
		? `<div class="${"s-legend-icon-label"}">${colorColumn.legendData.hasSingleValueBucket
			? `<div class="${"s-legend-item-label__item q-table-colorColumn-legend-info--single-bucket"}"><svg width="${"11"}" height="${"11"}" class="${[
					"s-legend-item-label__item__icon q-table-colorColumn-legend-info-icon",
					(!noInteraction
					? "q-table-colorColumn-legend-info-icon--interactive"
					: "") + ' ' + (noInteraction
					? "q-table-colorColumn-legend-info-icon--no-interactive"
					: "")
				].join(' ').trim()}">${colorColumn.legendData.buckets[0].color.customColor
				? `<rect width="${"11"}" height="${"11"}" class="${"q-table-colorColumn-legend-bucket"}" style="${"color: " + escape(colorColumn.legendData.buckets[0].color.customColor)}"></rect>`
				: `<rect width="${"11"}" height="${"11"}" class="${"q-table-colorColumn-legend-bucket " + escape(colorColumn.legendData.buckets[0].color.colorClass)}"></rect>`}</svg>
              <div class="${"s-legend-item-label__item__label s-font-note--tabularnums"}">= ${escape(colorColumn.legendData.buckets[0].from)}</div></div>`
			: ``}
          ${colorColumn.legendData.hasNullValues
			? `<div class="${"s-legend-item-label__item q-table-colorColumn-legend-info--no-data"}"><svg width="${"11"}" height="${"11"}" class="${[
					"s-legend-item-label__item__icon q-table-colorColumn-legend-info-icon",
					(!noInteraction
					? "q-table-colorColumn-legend-info-icon--interactive"
					: "") + ' ' + (noInteraction
					? "q-table-colorColumn-legend-info-icon--no-interactive"
					: "")
				].join(' ').trim()}"><rect width="${"11"}" height="${"11"}" class="${"s-color-gray-4"}" fill="${"white"}" stroke="${"currentColor"}" stroke-width="${"2"}"></rect></svg>
              <div class="${"s-legend-item-label__item__label"}">Keine Daten</div></div>`
			: ``}</div>`
		: ``}</div></div>`
	: `
  <div class="${"q-table-colorColumn-legend--categorical"}"><div class="${"s-legend-icon-label"}">${each(colorColumn.legendData.categories, (category, categoryIndex) => {
			return `${category.color.customColor
			? `<div class="${"s-legend-item-label__item"}" style="${"color: " + escape(category.color.customColor)}"><div class="${"s-legend-item-label__item__icon s-legend-item-label__item__icon--default"}"></div>
            <div class="${"s-legend-item-label__item__label"}">${escape(category.label)}</div>
          </div>`
			: `<div class="${"s-legend-item-label__item " + escape(category.color.colorClass)}"><div class="${"s-legend-item-label__item__icon s-legend-item-label__item__icon--default"}"></div>
            <div class="${"s-legend-item-label__item__label"}">${escape(category.label)}</div>
          </div>`}`;
		})}</div>
    ${colorColumn.legendData.hasNullValues
		? `<div class="${"s-legend-icon-label"}"><div class="${"s-legend-item-label__item"}"><svg width="${"11"}" height="${"11"}" class="${[
				"s-legend-item-label__item__icon q-table-colorColumn-legend-info-icon",
				(!noInteraction
				? "q-table-colorColumn-legend-info-icon--interactive"
				: "") + ' ' + (noInteraction
				? "q-table-colorColumn-legend-info-icon--no-interactive"
				: "")
			].join(' ').trim()}"><rect width="${"11"}" height="${"11"}" class="${"s-color-gray-4"}" fill="${"white"}" stroke="${"currentColor"}" stroke-width="${"2"}"></rect></svg>
          <div class="${"s-legend-item-label__item__label"}">Keine Daten</div></div></div>`
		: ``}</div>`}`;
});

/* src/components/Footer.svelte generated by Svelte v3.48.0 */

const Footer = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { item } = $$props;
	if ($$props.item === void 0 && $$bindings.item && item !== void 0) $$bindings.item(item);

	return `<div class="${"s-q-item__footer"}">${item.notes
	? `<div class="${"s-q-item__footer__notes"}">${escape(item.notes)}</div>`
	: ``}
  <div class="${"s-q-item__footer__details"}">${item.sources && item.sources.length > 0
	? `<div class="${"s-q-item__footer__sources"}">${item.sources.length > 1 ? `Quellen:` : `Quelle:`}
        ${each(item.sources, (source, index) => {
			return `${source.text !== ""
			? `${source.link && source.link.url && source.link.isValid
				? `<a${add_attribute("href", source.link.url, 0)} target="${"blank"}" rel="${"noopener noreferrer"}">${escape(source.text)}</a>`
				: `${escape(source.text)}`}${index !== item.sources.length - 1 && item.sources[index + 1] !== ""
				? `,Â `
				: ``}`
			: ``}`;
		})}</div>`
	: ``}</div></div>`;
});

/* src/components/minibar/MinibarBox.svelte generated by Svelte v3.48.0 */

const MinibarBox = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { item } = $$props;
	let { minibar } = $$props;
	let { rowIndex } = $$props;
	let { colIndex } = $$props;
	let { initWithCardLayout } = $$props;

	// this has to be done because the tableData will be sliced before iterating
	rowIndex += 1;

	function getBarStyle() {
		let style = "";

		if (minibar.values[rowIndex].type !== "empty") {
			style = `width: ${minibar.values[rowIndex].value}%;`;

			if (minibar.barColor.positive.colorCode || minibar.barColor.negative.colorCode) {
				if (minibar.barColor.positive.colorCode) {
					style += `background-color: ${minibar.barColor.positive.colorCode};`;
				}

				if (minibar.barColor.negative.colorCode) {
					style += `background-color: ${minibar.barColor.negative.colorCode};`;
				}
			}
		}

		return style;
	}

	function getCellStyle() {
		let style = "";

		// check for type and return accordingly
		if (minibar.type === "positive") {
			style = "padding-right: 12px !important;";
		} else if (minibar.type === "negative") {
			style = "padding-left: 12px; padding-right: 0px !important;";
		}

		return style;
	}

	function getMinibarClassName() {
		return minibar.values[rowIndex].type === "positive"
		? minibar.barColor.positive.className
		: minibar.barColor.negative.className;
	}

	if ($$props.item === void 0 && $$bindings.item && item !== void 0) $$bindings.item(item);
	if ($$props.minibar === void 0 && $$bindings.minibar && minibar !== void 0) $$bindings.minibar(minibar);
	if ($$props.rowIndex === void 0 && $$bindings.rowIndex && rowIndex !== void 0) $$bindings.rowIndex(rowIndex);
	if ($$props.colIndex === void 0 && $$bindings.colIndex && colIndex !== void 0) $$bindings.colIndex(colIndex);
	if ($$props.initWithCardLayout === void 0 && $$bindings.initWithCardLayout && initWithCardLayout !== void 0) $$bindings.initWithCardLayout(initWithCardLayout);

	return `${item.options.minibar.selectedColumn === colIndex && !initWithCardLayout
	? `<td class="${"q-table-minibar-cell"}"${add_attribute("data-minibar", minibar.type, 0)}${add_attribute("style", getCellStyle(), 0)}><div class="${"q-table-minibar-bar--" + escape(minibar.values[rowIndex].type) + " " + escape(getMinibarClassName())}"${add_attribute("style", getBarStyle(), 0)}></div></td>`
	: ``}`;
});

/* src/components/minibar/MinibarValue.svelte generated by Svelte v3.48.0 */

const MinibarValue = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { item } = $$props;
	let { tableData } = $$props;
	let { minibar } = $$props;
	let { cell } = $$props;
	let { colIndex } = $$props;
	let { rowIndex } = $$props;

	function getDataLabelAttribute() {
		let dataLabel = "";

		if (item.options.hideTableHeader !== true) {
			dataLabel += tableData[0][colIndex].value;

			if ((item.options.cardLayout || item.options.cardLayoutIfSmall) && tableData[0][colIndex].footnote && rowIndex === 0) {
				dataLabel += tableData[0][colIndex].footnote.unicode;
			}
		}

		return dataLabel;
	}

	function getMinibarDataAttribute() {
		if (item.options.minibar.selectedColumn === colIndex && !item.options.initWithCardLayout) {
			return minibar.type;
		}

		return;
	}

	function getCellClass() {
		let classes = `q-table__cell q-table__cell--${cell.type} ${cell.classes.join(" ")} `;

		if (item.options.minibar.selectedColumn === colIndex && !item.options.initWithCardLayout) {
			classes += "q-table-minibar-cell--value";
		}

		return classes;
	}

	function getCellStyles() {
		let styles = "";

		if (item.options.minibar.selectedColumn === colIndex && !item.options.initWithCardLayout) {
			if (minibar.type === "positive") {
				styles += "padding-left: 12px";
			} else if (minibar.type === "negative") {
				styles = "padding-right: 12px;";
			}
		}

		return styles;
	}

	if ($$props.item === void 0 && $$bindings.item && item !== void 0) $$bindings.item(item);
	if ($$props.tableData === void 0 && $$bindings.tableData && tableData !== void 0) $$bindings.tableData(tableData);
	if ($$props.minibar === void 0 && $$bindings.minibar && minibar !== void 0) $$bindings.minibar(minibar);
	if ($$props.cell === void 0 && $$bindings.cell && cell !== void 0) $$bindings.cell(cell);
	if ($$props.colIndex === void 0 && $$bindings.colIndex && colIndex !== void 0) $$bindings.colIndex(colIndex);
	if ($$props.rowIndex === void 0 && $$bindings.rowIndex && rowIndex !== void 0) $$bindings.rowIndex(rowIndex);

	return `<td${add_attribute("data-label", getDataLabelAttribute(), 0)}${add_attribute("data-minibar", getMinibarDataAttribute(), 0)}${add_attribute("class", getCellClass(), 0)}${add_attribute("style", getCellStyles(), 0)}>${cell.footnote
	? `<span${add_attribute("data-annotation", cell.footnote.value, 0)} class="${"q-table-footnote-annotation"}">${cell.value ? `${escape(cell.value)}` : ``}</span>`
	: `${cell.value ? `${escape(cell.value)}` : ``}`}</td>`;
});

/* src/components/minibar/MixedMinibars.svelte generated by Svelte v3.48.0 */

const MixedMinibars = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { item } = $$props;
	let { tableData } = $$props;
	let { cell } = $$props;
	let { minibar } = $$props;
	let { colIndex } = $$props;
	let { rowIndex } = $$props;
	let { initWithCardLayout } = $$props;

	// this has to be done because the tableData will be sliced before iterating
	rowIndex += 1;

	function getDataLabelAttribute() {
		let dataLabel = "";

		if (item.options.hideTableHeader !== true) {
			dataLabel = tableData[0][colIndex].value;

			if ((item.options.cardLayout || item.options.cardLayoutIfSmall) && tableData[0][colIndex].footnote && rowIndex === 0) {
				dataLabel += tableData[0][colIndex].footnote.unicode;
			}
		}

		return dataLabel;
	}

	function getMinibarColor() {
		return minibar.values[rowIndex].type === "positive"
		? minibar.barColor.positive.colorCode
		: minibar.barColor.negative.colorCode;
	}

	function getMinibarClasses() {
		let classes = "";

		if (item.options.minibar.selectedColumn === colIndex && !initWithCardLayout) {
			classes = "q-table-minibar--mixed";
		} else {
			classes = `q-table__cell--${cell.type}`;
		}

		return classes;
	}

	function getFootnoteClasses() {
		if (cell.footnote) {
			return minibar.values[rowIndex].type === "positive"
			? cell.footnote.class
			: "";
		}

		return "";
	}

	function getMinibarClassName() {
		return minibar.values[rowIndex].type === "positive"
		? minibar.barColor.positive.className
		: minibar.barColor.negative.className;
	}

	if ($$props.item === void 0 && $$bindings.item && item !== void 0) $$bindings.item(item);
	if ($$props.tableData === void 0 && $$bindings.tableData && tableData !== void 0) $$bindings.tableData(tableData);
	if ($$props.cell === void 0 && $$bindings.cell && cell !== void 0) $$bindings.cell(cell);
	if ($$props.minibar === void 0 && $$bindings.minibar && minibar !== void 0) $$bindings.minibar(minibar);
	if ($$props.colIndex === void 0 && $$bindings.colIndex && colIndex !== void 0) $$bindings.colIndex(colIndex);
	if ($$props.rowIndex === void 0 && $$bindings.rowIndex && rowIndex !== void 0) $$bindings.rowIndex(rowIndex);
	if ($$props.initWithCardLayout === void 0 && $$bindings.initWithCardLayout && initWithCardLayout !== void 0) $$bindings.initWithCardLayout(initWithCardLayout);

	return `<td${add_attribute("data-label", getDataLabelAttribute(), 0)}${add_attribute("data-minibar", minibar.type, 0)} class="${"q-table__cell " + escape(cell.classes.join(' ')) + " " + escape(getMinibarClasses())}">${item.options.minibar.selectedColumn === colIndex && !initWithCardLayout
	? `<div${add_attribute("data-minibar", minibar.values[rowIndex].type, 0)} class="${"q-table-minibar-alignment--" + escape(minibar.values[rowIndex].type) + " q-table__cell q-table__cell--" + escape(cell.type) + " " + escape(getFootnoteClasses())}">${cell.footnote
		? `<span${add_attribute("data-annotation", cell.footnote.value, 0)} class="${"q-table-footnote-annotation"}">${cell.value ? `${escape(cell.value)}` : ``}</span>`
		: `${cell.value ? `${escape(cell.value)}` : ``}`}</div>`
	: `${cell.footnote
		? `<span${add_attribute("data-annotation", cell.footnote.value, 0)} class="${"q-table-footnote-annotation"}">${cell.value ? `${escape(cell.value)}` : ``}</span>`
		: `${cell.value ? `${escape(cell.value)}` : ``}`}`}
  ${item.options.minibar.selectedColumn === colIndex && !initWithCardLayout
	? `${minibar.values[rowIndex].type !== "empty"
		? `<div${add_attribute("data-minibar", minibar.values[rowIndex].type, 0)} class="${"q-table-minibar-bar--" + escape(minibar.values[rowIndex].type) + " q-table-minibar--" + escape(minibar.values[rowIndex].type) + " " + escape(getMinibarClassName())}" style="${"width: " + escape(minibar.values[rowIndex].value) + "%; background-color: " + escape(getMinibarColor())}"></div>`
		: ``}`
	: ``}</td>`;
});

/* src/components/svg/OpenIcon.svelte generated by Svelte v3.48.0 */

const OpenIcon = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	return `<div class="${"q-table-methods-link-icon-plus"}"><svg xmlns="${"http://www.w3.org/2000/svg"}" viewBox="${"0 0 15 15"}"><g><path d="${"M3.02 7.5h8.96M7.5 3.02v8.96"}" fill="${"none"}" stroke="${"#000"}" stroke-width="${".75"}" stroke-lincap="${"round"}" stroke-miterlimit="${"10"}"></path><circle cx="${"7.5"}" cy="${"7.5"}" r="${"6.65"}" fill="${"none"}" stroke="${"#000"}" stroke-miterlimit="${"10"}" stroke-width="${".75"}"></circle></g></svg></div>`;
});

/* src/components/svg/CloseIcon.svelte generated by Svelte v3.48.0 */

const CloseIcon = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	return `<div class="${"q-table-methods-link-icon-close hidden"}"><svg xmlns="${"http://www.w3.org/2000/svg"}" viewBox="${"0 0 15 15"}"><g><path d="${"M4.33 4.33l6.34 6.34M10.67 4.33l-6.34 6.34"}" fill="${"none"}" stroke="${"#000"}" stroke-width="${"0.75"}" stroke-linecap="${"round"}" stroke-miterlimit="${"10"}"></path><circle cx="${"7.5"}" cy="${"7.5"}" r="${"6.65"}" fill="${"none"}" stroke="${"#000"}" stroke-miterlimit="${"10"}" stroke-width="${".75"}"></circle></g></svg></div>`;
});

/* src/components/MethodBox.svelte generated by Svelte v3.48.0 */

const MethodBox = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { colorColumn } = $$props;
	let { noInteraction } = $$props;
	if ($$props.colorColumn === void 0 && $$bindings.colorColumn && colorColumn !== void 0) $$bindings.colorColumn(colorColumn);
	if ($$props.noInteraction === void 0 && $$bindings.noInteraction && noInteraction !== void 0) $$bindings.noInteraction(noInteraction);

	return `${noInteraction
	? `<div class="${"q-table-methodbox--no-interaction"}"><div class="${"s-font-title-s"}">Daten und Methodik</div>
    <div><div class="${"s-legend-icon-label"}">${each(colorColumn.methodBox.formattedBuckets, (bucket, bucketIndex) => {
			return `<div class="${"s-legend-item-label__item q-table-methods-box-static"}">${bucket.color.customColor
			? `<div class="${"q-table-methods-circle-static s-legend-item-label__item__icon s-legend-item-label__item__icon--default"}" style="${"color: " + escape(bucket.color.customColor)}"></div>`
			: `<div class="${"q-table-methods-circle-static s-legend-item-label__item__icon s-legend-item-label__item__icon--default " + escape(bucket.color.colorClass)}"></div>`}
            <div class="${"s-legend-item-label__item__label s-font-note--tabularnums"}">${bucketIndex === 0 && colorColumn.legendData.hasSingleValueBucket
			? `${escape(bucket.from)} (nur ein Datenpunkt)`
			: `${escape(bucket.from)}â${escape(bucket.to)}`}</div>
          </div>`;
		})}</div>
      <div class="${"q-table-methods-description s-font-note-s"}">${escape(colorColumn.methodBox.text)}</div></div></div>`
	: `<div class="${"q-table-methods-link s-font-note-s"}">${validate_component(OpenIcon, "OpenIcon").$$render($$result, {}, {}, {})}
    ${validate_component(CloseIcon, "CloseIcon").$$render($$result, {}, {}, {})}
    <div class="${"q-table-methods-link-text"}">Daten und Methodik</div></div>
  <div class="${"q-table-methods-container hidden s-font-note-s"}"><div class="${"q-table-methods-legend"}"><table class="${"q-table-methods-legend-table s-font-note--tabularnums"}">${each(colorColumn.methodBox.formattedBuckets, (bucket, bucketIndex) => {
			return `<tr><td><div class="${escape(bucket.color.colorClass !== undefined
			? bucket.color.colorClass
			: '') + " q-table-methods-circle q-table-methods-circle--circle-fill"}" style="${"color: " + escape(bucket.color.customColor !== undefined
			? bucket.color.customColor
			: '')}"></div></td>
            ${bucketIndex === 0 && colorColumn.legendData.hasSingleValueBucket
			? `<td></td>
              <td></td>
              <td>${escape(bucket.from)}</td>
              <td>(nur ein Datenpunkt)</td>`
			: `<td>${escape(bucket.from)}</td>
              <td>â</td>
              <td>${escape(bucket.to)}</td>
              <td></td>`}
          </tr>`;
		})}</table></div>
    <div class="${"q-table-methods-description"}">${escape(colorColumn.methodBox.text)}</div>
    ${colorColumn.methodBox.article !== null && colorColumn.methodBox.article !== undefined
		? `<div class="${"q-table-methods-article-container"}"><a${add_attribute("href", colorColumn.methodBox.article.url, 0)} target="${"_blank"}" rel="${"noopener noreferrer"}">${escape(colorColumn.methodBox.article.title)}</a></div>`
		: ``}</div>`}`;
});

/* src/components/Cell.svelte generated by Svelte v3.48.0 */

const Cell = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let styles;
	let { item } = $$props;
	let { cell } = $$props;
	let { tableData } = $$props;
	let { colorColumn } = $$props;
	let { rowIndex } = $$props;
	let { colIndex } = $$props;
	let { initWithCardLayout } = $$props;

	function getDataLabel(colIndex) {
		let dataLabel = "";

		if (tableData[0][colIndex] && tableData[0][colIndex].value) {
			if (item.options.hideTableHeader !== true) {
				dataLabel += tableData[0][colIndex].value;
			}

			if (initWithCardLayout && tableData[0][colIndex].footnote) {
				dataLabel += tableData[0][colIndex].footnote.unicode;
			}
		}

		return dataLabel;
	}

	function getCellStyles(colIndex, rowIndex) {
		let classes = `q-table__cell q-table__cell--${cell.type} ${cell.classes.join(" ")} `;
		let styles = "";

		if (colorColumn !== null) {
			if (colorColumn.selectedColumn === colIndex && !initWithCardLayout) {
				if (colorColumn.colors[rowIndex].customColor) {
					styles += `background-color: ${colorColumn.colors[rowIndex].customColor};`;
				} else {
					classes += colorColumn.colors[rowIndex].colorClass;
					styles += "background-color: currentColor;";
				}
			}
		}

		return { class: classes, style: styles };
	}

	if ($$props.item === void 0 && $$bindings.item && item !== void 0) $$bindings.item(item);
	if ($$props.cell === void 0 && $$bindings.cell && cell !== void 0) $$bindings.cell(cell);
	if ($$props.tableData === void 0 && $$bindings.tableData && tableData !== void 0) $$bindings.tableData(tableData);
	if ($$props.colorColumn === void 0 && $$bindings.colorColumn && colorColumn !== void 0) $$bindings.colorColumn(colorColumn);
	if ($$props.rowIndex === void 0 && $$bindings.rowIndex && rowIndex !== void 0) $$bindings.rowIndex(rowIndex);
	if ($$props.colIndex === void 0 && $$bindings.colIndex && colIndex !== void 0) $$bindings.colIndex(colIndex);
	if ($$props.initWithCardLayout === void 0 && $$bindings.initWithCardLayout && initWithCardLayout !== void 0) $$bindings.initWithCardLayout(initWithCardLayout);
	styles = getCellStyles(colIndex, rowIndex);

	return `<td${add_attribute("data-label", getDataLabel(colIndex), 0)}${add_attribute("class", styles.class, 0)}${add_attribute("style", styles.style, 0)}>${colorColumn !== null && colorColumn.selectedColumn === colIndex && !initWithCardLayout
	? `${cell.footnote
		? `<span${add_attribute("class", colorColumn.colors[rowIndex].textColor, 0)}>${colorColumn.colorColumnType === "numerical"
			? `${!colorColumn.formattedValues[rowIndex]
				? `--`
				: `${escape(colorColumn.formattedValues[rowIndex])}`}`
			: `${cell.value ? `${escape(cell.value)}` : ``}`}</span>
      ${cell.footnote.value
			? `<span class="${"q-table-footnote-annotation--colorColumn " + escape(colorColumn.colors[rowIndex].textColor)}"><sup>${escape(cell.footnote.value)}</sup></span>`
			: ``}`
		: `<span${add_attribute("class", colorColumn.colors[rowIndex].textColor, 0)}>${colorColumn.colorColumnType === "numerical"
			? `${!colorColumn.formattedValues[rowIndex]
				? `--`
				: `${escape(colorColumn.formattedValues[rowIndex])}`}`
			: `${cell.value ? `${escape(cell.value)}` : ``}`}</span>`}`
	: `${cell.footnote
		? `<span${add_attribute("data-annotation", cell.footnote.value, 0)} class="${"q-table-footnote-annotation"}">${cell.value ? `${escape(cell.value)}` : ``}</span>`
		: `${cell.value ? `<span>${escape(cell.value)}</span>` : ``}`}`}</td>`;
});

/* src/components/Table.svelte generated by Svelte v3.48.0 */

const css = {
	code: ".hidden.svelte-1ifx1we{display:none}",
	map: "{\"version\":3,\"file\":\"Table.svelte\",\"sources\":[\"Table.svelte\"],\"sourcesContent\":[\"<script>\\n  import Legend from \\\"./Legend.svelte\\\";\\n  import Footer from \\\"./Footer.svelte\\\";\\n  import MinibarBox from \\\"./minibar/MinibarBox.svelte\\\";\\n  import MinibarValue from \\\"./minibar/MinibarValue.svelte\\\";\\n  import MixedMinibars from \\\"./minibar/MixedMinibars.svelte\\\";\\n  import MethodBox from \\\"./MethodBox.svelte\\\";\\n  import Cell from \\\"./Cell.svelte\\\";\\n  export let item;\\n  export let initWithCardLayout;\\n  export let tableData;\\n  export let minibar;\\n  export let footnotes;\\n  export let colorColumn;\\n  export let numberOfRowsToHide;\\n  export let displayOptions;\\n  export let noInteraction;\\n  export let id;\\n\\n  function getAttributes(colIndex) {\\n    let colspan = 0;\\n    let classes = \\\"\\\";\\n    if (\\n      minibar &&\\n      minibar.type &&\\n      item.options.minibar &&\\n      item.options.minibar.selectedColumn === colIndex &&\\n      minibar.type !== \\\"mixed\\\" &&\\n      !initWithCardLayout\\n    ) {\\n      colspan = 2;\\n      classes = \\\"q-table-minibar-header\\\";\\n    } else if (\\n      minibar &&\\n      minibar.type === \\\"mixed\\\" &&\\n      item.options.minibar &&\\n      item.options.minibar.selectedColumn === colIndex\\n    ) {\\n      colspan = 0;\\n      classes = \\\"q-table-minibar-header\\\";\\n    }\\n    return { colspan, classes };\\n  }\\n\\nfunction click() {\\n  console.log(\\\"CLICKED\\\");\\n}\\n\\n\\n</script>\\n\\n<div\\n  class=\\\"s-q-item q-table\\\"\\n  class:q-table--card-layout={initWithCardLayout}\\n  {id}\\n  style=\\\"opacity: 0;\\\"\\n  on:click={click}\\n>\\n  {#if displayOptions.hideTitle !== true}\\n    <h3 class=\\\"s-q-item__title\\\">{item.title} + 222</h3>\\n  {/if}\\n  {#if item.subtitle && item.subtitle !== \\\"\\\"}\\n    <div class=\\\"s-q-item__subtitle\\\">{item.subtitle}</div>\\n  {/if}\\n  <div style=\\\"overflow-x: auto;\\\">\\n    {#if noInteraction !== true && item.options.showTableSearch === true && tableData.length > 16}\\n      <div class=\\\"q-table__search\\\">\\n        <input\\n          class=\\\"q-table__search__input s-input-field\\\"\\n          type=\\\"search\\\"\\n          placeholder=\\\"Bitte Suche eingeben\\\"\\n          maxlength=\\\"20\\\"\\n          value=\\\"\\\"\\n          autocapitalize=\\\"off\\\"\\n          autocomplete=\\\"off\\\"\\n          spellcheck=\\\"false\\\"\\n          aria-label=\\\"Suchen\\\"\\n        />\\n      </div>\\n    {/if}\\n    {#if colorColumn && colorColumn.selectedColumn !== undefined && colorColumn.selectedColumn !== item.options.minibar.selectedColumn && !initWithCardLayout}\\n      <Legend {colorColumn} {noInteraction} />\\n    {/if}\\n    <table class=\\\"q-table__table\\\">\\n      {#if item.options.hideTableHeader !== true}\\n        <thead class=\\\"s-font-note s-font-note--strong\\\">\\n          {#each tableData[0] as head, colIndex}\\n            <th\\n              class=\\\"q-table__cell q-table-cell--head q-table__cell--{head.type} {head.classes.join(\\n                ' '\\n              )} {getAttributes(colIndex).classes}\\\"\\n              colspan={getAttributes(colIndex).colspan}\\n            >\\n              {#if head.footnote}\\n                <span\\n                  data-annotation={head.footnote.value}\\n                  class=\\\"q-table-footnote-annotation\\\">{head.value}</span\\n                >\\n              {:else if head.value}\\n                {head.value}\\n              {/if}\\n            </th>\\n          {/each}\\n        </thead>\\n      {/if}\\n      <tbody class=\\\"s-font-note\\\">\\n        {#each tableData.slice(1) as row, rowIndex}\\n          <tr\\n            class:hidden={numberOfRowsToHide &&\\n              rowIndex.index >= tableData.length - numberOfRowsToHide}\\n          >\\n            {#each row as cell, colIndex}\\n              {#if item.options.minibar && item.options.minibar.selectedColumn !== null && item.options.minibar.selectedColumn !== undefined && item.options.minibar.selectedColumn === colIndex}\\n                {#if minibar.type === \\\"positive\\\"}\\n                  <MinibarValue\\n                    {item}\\n                    {tableData}\\n                    {minibar}\\n                    {cell}\\n                    {colIndex}\\n                    {rowIndex}\\n                  />\\n                  <MinibarBox\\n                    {item}\\n                    {tableData}\\n                    {minibar}\\n                    {cell}\\n                    {colIndex}\\n                    {rowIndex}\\n                  />\\n                {:else if minibar.type === \\\"negative\\\"}\\n                  <MinibarBox\\n                    {item}\\n                    {tableData}\\n                    {minibar}\\n                    {cell}\\n                    {colIndex}\\n                    {rowIndex}\\n                  />\\n                  <MinibarValue\\n                    {item}\\n                    {tableData}\\n                    {minibar}\\n                    {cell}\\n                    {colIndex}\\n                    {rowIndex}\\n                  />\\n                {:else if minibar.type === \\\"mixed\\\"}\\n                  <MixedMinibars\\n                    {item}\\n                    {tableData}\\n                    {minibar}\\n                    {cell}\\n                    {rowIndex}\\n                    {colIndex}\\n                    {initWithCardLayout}\\n                  />\\n                {:else}\\n                  <Cell\\n                    {item}\\n                    {cell}\\n                    {tableData}\\n                    {colorColumn}\\n                    {colIndex}\\n                    {rowIndex}\\n                    {initWithCardLayout}\\n                  />\\n                {/if}\\n              {:else}\\n                <Cell\\n                  {item}\\n                  {cell}\\n                  {tableData}\\n                  {colorColumn}\\n                  {colIndex}\\n                  {rowIndex}\\n                  {initWithCardLayout}\\n                />\\n              {/if}\\n            {/each}\\n          </tr>\\n        {/each}\\n      </tbody>\\n    </table>\\n  </div>\\n  {#if footnotes.length > 0}\\n    {#each footnotes as footnote}\\n      <div class=\\\"q-table-footnote-footer s-font-note-s\\\">\\n        <span class=\\\"q-table-footnote-index s-font-note--tabularnums\\\"\\n          >{footnote.index}</span\\n        ><span class=\\\"q-table-footnote-text\\\">{footnote.value}</span>\\n      </div>\\n    {/each}\\n  {/if}\\n  {#if colorColumn && colorColumn.methodBox !== null}\\n    <MethodBox {colorColumn} {noInteraction} />\\n  {/if}\\n  <Footer {item} />\\n</div>\\n\\n<style>\\n  .hidden {\\n    display: none;\\n  }\\n</style>\\n\"],\"names\":[],\"mappings\":\"AAyME,OAAO,eAAC,CAAC,AACP,OAAO,CAAE,IAAI,AACf,CAAC\"}"
};

const Table = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { item } = $$props;
	let { initWithCardLayout } = $$props;
	let { tableData } = $$props;
	let { minibar } = $$props;
	let { footnotes } = $$props;
	let { colorColumn } = $$props;
	let { numberOfRowsToHide } = $$props;
	let { displayOptions } = $$props;
	let { noInteraction } = $$props;
	let { id } = $$props;

	function getAttributes(colIndex) {
		let colspan = 0;
		let classes = "";

		if (minibar && minibar.type && item.options.minibar && item.options.minibar.selectedColumn === colIndex && minibar.type !== "mixed" && !initWithCardLayout) {
			colspan = 2;
			classes = "q-table-minibar-header";
		} else if (minibar && minibar.type === "mixed" && item.options.minibar && item.options.minibar.selectedColumn === colIndex) {
			colspan = 0;
			classes = "q-table-minibar-header";
		}

		return { colspan, classes };
	}

	if ($$props.item === void 0 && $$bindings.item && item !== void 0) $$bindings.item(item);
	if ($$props.initWithCardLayout === void 0 && $$bindings.initWithCardLayout && initWithCardLayout !== void 0) $$bindings.initWithCardLayout(initWithCardLayout);
	if ($$props.tableData === void 0 && $$bindings.tableData && tableData !== void 0) $$bindings.tableData(tableData);
	if ($$props.minibar === void 0 && $$bindings.minibar && minibar !== void 0) $$bindings.minibar(minibar);
	if ($$props.footnotes === void 0 && $$bindings.footnotes && footnotes !== void 0) $$bindings.footnotes(footnotes);
	if ($$props.colorColumn === void 0 && $$bindings.colorColumn && colorColumn !== void 0) $$bindings.colorColumn(colorColumn);
	if ($$props.numberOfRowsToHide === void 0 && $$bindings.numberOfRowsToHide && numberOfRowsToHide !== void 0) $$bindings.numberOfRowsToHide(numberOfRowsToHide);
	if ($$props.displayOptions === void 0 && $$bindings.displayOptions && displayOptions !== void 0) $$bindings.displayOptions(displayOptions);
	if ($$props.noInteraction === void 0 && $$bindings.noInteraction && noInteraction !== void 0) $$bindings.noInteraction(noInteraction);
	if ($$props.id === void 0 && $$bindings.id && id !== void 0) $$bindings.id(id);
	$$result.css.add(css);

	return `<div class="${["s-q-item q-table", initWithCardLayout ? "q-table--card-layout" : ""].join(' ').trim()}"${add_attribute("id", id, 0)} style="${"opacity: 0;"}">${displayOptions.hideTitle !== true
	? `<h3 class="${"s-q-item__title"}">${escape(item.title)} + 222</h3>`
	: ``}
  ${item.subtitle && item.subtitle !== ""
	? `<div class="${"s-q-item__subtitle"}">${escape(item.subtitle)}</div>`
	: ``}
  <div style="${"overflow-x: auto;"}">${noInteraction !== true && item.options.showTableSearch === true && tableData.length > 16
	? `<div class="${"q-table__search"}"><input class="${"q-table__search__input s-input-field"}" type="${"search"}" placeholder="${"Bitte Suche eingeben"}" maxlength="${"20"}" value="${""}" autocapitalize="${"off"}" autocomplete="${"off"}" spellcheck="${"false"}" aria-label="${"Suchen"}"></div>`
	: ``}
    ${colorColumn && colorColumn.selectedColumn !== undefined && colorColumn.selectedColumn !== item.options.minibar.selectedColumn && !initWithCardLayout
	? `${validate_component(Legend, "Legend").$$render($$result, { colorColumn, noInteraction }, {}, {})}`
	: ``}
    <table class="${"q-table__table"}">${item.options.hideTableHeader !== true
	? `<thead class="${"s-font-note s-font-note--strong"}">${each(tableData[0], (head, colIndex) => {
			return `<th class="${"q-table__cell q-table-cell--head q-table__cell--" + escape(head.type) + " " + escape(head.classes.join(' ')) + " " + escape(getAttributes(colIndex).classes) + " svelte-1ifx1we"}"${add_attribute("colspan", getAttributes(colIndex).colspan, 0)}>${head.footnote
			? `<span${add_attribute("data-annotation", head.footnote.value, 0)} class="${"q-table-footnote-annotation"}">${escape(head.value)}</span>`
			: `${head.value ? `${escape(head.value)}` : ``}`}
            </th>`;
		})}</thead>`
	: ``}
      <tbody class="${"s-font-note"}">${each(tableData.slice(1), (row, rowIndex) => {
		return `<tr class="${[
			"svelte-1ifx1we",
			numberOfRowsToHide && rowIndex.index >= tableData.length - numberOfRowsToHide
			? "hidden"
			: ""
		].join(' ').trim()}">${each(row, (cell, colIndex) => {
			return `${item.options.minibar && item.options.minibar.selectedColumn !== null && item.options.minibar.selectedColumn !== undefined && item.options.minibar.selectedColumn === colIndex
			? `${minibar.type === "positive"
				? `${validate_component(MinibarValue, "MinibarValue").$$render(
						$$result,
						{
							item,
							tableData,
							minibar,
							cell,
							colIndex,
							rowIndex
						},
						{},
						{}
					)}
                  ${validate_component(MinibarBox, "MinibarBox").$$render(
						$$result,
						{
							item,
							tableData,
							minibar,
							cell,
							colIndex,
							rowIndex
						},
						{},
						{}
					)}`
				: `${minibar.type === "negative"
					? `${validate_component(MinibarBox, "MinibarBox").$$render(
							$$result,
							{
								item,
								tableData,
								minibar,
								cell,
								colIndex,
								rowIndex
							},
							{},
							{}
						)}
                  ${validate_component(MinibarValue, "MinibarValue").$$render(
							$$result,
							{
								item,
								tableData,
								minibar,
								cell,
								colIndex,
								rowIndex
							},
							{},
							{}
						)}`
					: `${minibar.type === "mixed"
						? `${validate_component(MixedMinibars, "MixedMinibars").$$render(
								$$result,
								{
									item,
									tableData,
									minibar,
									cell,
									rowIndex,
									colIndex,
									initWithCardLayout
								},
								{},
								{}
							)}`
						: `${validate_component(Cell, "Cell").$$render(
								$$result,
								{
									item,
									cell,
									tableData,
									colorColumn,
									colIndex,
									rowIndex,
									initWithCardLayout
								},
								{},
								{}
							)}`}`}`}`
			: `${validate_component(Cell, "Cell").$$render(
					$$result,
					{
						item,
						cell,
						tableData,
						colorColumn,
						colIndex,
						rowIndex,
						initWithCardLayout
					},
					{},
					{}
				)}`}`;
		})}
          </tr>`;
	})}</tbody></table></div>
  ${footnotes.length > 0
	? `${each(footnotes, footnote => {
			return `<div class="${"q-table-footnote-footer s-font-note-s"}"><span class="${"q-table-footnote-index s-font-note--tabularnums"}">${escape(footnote.index)}</span><span class="${"q-table-footnote-text"}">${escape(footnote.value)}</span>
      </div>`;
		})}`
	: ``}
  ${colorColumn && colorColumn.methodBox !== null
	? `${validate_component(MethodBox, "MethodBox").$$render($$result, { colorColumn, noInteraction }, {}, {})}`
	: ``}
  ${validate_component(Footer, "Footer").$$render($$result, { item }, {}, {})}
</div>`;
});

export { Table as default };
